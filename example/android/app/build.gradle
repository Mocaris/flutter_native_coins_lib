def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

android {
    compileSdkVersion 30

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "com.mocaris.flutter.native_coins.native_coins_lib_example"
        minSdkVersion 16
        targetSdkVersion 30
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        multiDexEnabled true
    }

    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig signingConfigs.debug
        }
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/ASL2.0'
        exclude 'org/bouncycastle/LICENSE'
        exclude 'META-INF/INDEX.LIST'
        exclude 'META-INF/io.netty.versions.properties'


        /**
         * 下面是排除多余的重复文件
         * 助记词文件 只用到 bitcoinj 中的，所以其他jar包中的可以排除掉
         */
        exclude 'org.bitcoin.production.checkpoints.txt'
        exclude 'org.bitcoin.test.checkpoints.txt'

        exclude 'bch/org/bitcoinj/crypto/cacerts'
        exclude 'bch/org/bitcoinj/crypto/mnemonic/wordlist/english.txt'

        exclude 'dash/org/bitcoinj/crypto/cacerts'
        exclude 'dash/org/bitcoinj/crypto/mnemonic/wordlist/english.txt'

        exclude 'dash.org.bitcoin.production.checkpoints.txt'
        exclude 'dash.org.bitcoin.test.checkpoints.txt'

        exclude 'ltc/org/bitcoinj/crypto/cacerts'
        exclude 'ltc/org/bitcoinj/crypto/mnemonic/wordlist/english.txt'

        exclude 'dash.org.bitcoin.production.checkpoints.txt'
        exclude 'dash.org.bitcoin.test.checkpoints.txt'
        exclude 'lib/dashj-core-0.14.4.3.jar'

        exclude 'lib/x86_64/darwin/libscrypt.dylib'
        exclude 'okhttp3/internal/publicsuffix/publicsuffixes.gz'
    }

    configurations.all {
        c ->
            c.resolutionStrategy.eachDependency {
                DependencyResolveDetails dependency ->
                    println dependency.requested.group
                    if (dependency.requested.group == 'org.bouncycastle') {
                        dependency.useTarget 'org.bouncycastle:bcprov-jdk15on:1.65'
                    }
            }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
}
